#!/bin/zsh

# Copyright 2017 Michele Vetturi
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# z-bump
# ------
# A bumper that automate versioning projects on Git repositories.
#
# Version: 0.1.1.11
# Last update: 2017-09-15
#

# Constants

readonly ZBUMP="z-bump"
readonly ZBUMP_VERSION="0.1.1.11"

readonly SECS_PER_YEAR=$((60 * 60 * 24 * 365))

# Set defaults

DEBUG=""
VERSION=""
COMMAND="build"

DEFAULT_BRANCH="master"
DEVELOP_BRANCH="dev"
RELEASE_BRANCH_PREFIX="release"

OUTPUT="VERSION"

# Usage helper

_usage()
{
    cat <<-EOUSAGE
usage: ${ZBUMP} [<options>[=<value>]] [<command>]

Special options:

  -h|--help               show this message, then exit
  -V|--version            show z-bump version, then exit
  -x|--debug              enable debugging (simulates bump)

Normal options:
  -m|--master=<branch>    override default stable branch (${DEFAULT_BRANCH})
  -d|--develop=<branch>   override default development branch (${DEVELOP_BRANCH})
  -r|--release=<prefix>   override prefix for release branches (${RELEASE_BRANCH_PREFIX})
  -o|--output=<path>      override default output for the file ${OUTPUT}

Commands:
  major                   bump major version and reset other
                          counters (except for the build number)
  minor                   bump minor and reset patch counters
  patch                   bump patch version
EOUSAGE
}

# Parse options from command line

while [ "${1}" != "" ]; do
    local param=`echo ${1} | awk -F= '{print $1}'`
    local value=`echo ${1} | awk -F= '{print $2}'`

    case ${param} in
        -h | --help)
            _usage
            exit 0
            ;;
        -x | --debug)
            DEBUG="yes"
            ;;
        -V | --version)
            echo "${ZBUMP} version ${ZBUMP_VERSION}"
            exit 0
            ;;
        -m | --master)
            DEFAULT_BRANCH=${value}
            ;;
        -d | --develop)
            DEVELOP_BRANCH=${value}
            ;;
        -r | --release)
            RELEASE_BRANCH_PREFIX=${value}
            ;;
        -o | --output)
            OUTPUT=${value}
            ;;
        major | minor | patch)
            COMMAND=${param}
            ;;
        *)
            echo "Unknown option: ${param}"
            _usage
            exit 1
            ;;
    esac
    shift
done

# ----
#  GO
# ----

# Load current version
VERSION="`cat ${OUTPUT}`"

# Get current branch and latest commit hash
current_branch="`git symbolic-ref --short -q HEAD`"
current_commit="`git rev-parse HEAD`"

# Get latest commit hash for default branch
latest_default_commit="`git rev-parse ${DEFAULT_BRANCH}`"

# Build commit history for default branch and count commits
default_history_ts=("${(f)$(git log --pretty=format:'%at' ${latest_default_commit})}")
default_commits_count="`git rev-list ${latest_default_commit} --count`"

# Get first and last timestamp for default branch and calculate its age
initial_default_commit_ts="${default_history_ts[-1]}"
latest_default_commit_ts="${default_history_ts[1]}"
default_age=$(( (latest_default_commit_ts - initial_default_commit_ts) * 1000 / SECS_PER_YEAR ))

# Calculating the basic build number
build_number=$(( default_commits_count + default_age ))

branch_short_name=""
current_to_default=""
current_commits_count=""

# If on develop branch ...
[[ ${current_branch} = "${DEVELOP_BRANCH}" ]] && branch_short_name="dev"

# If on a release branch ...
[[ ${current_branch} =~ "${RELEASE_BRANCH_PREFIX}" ]] && branch_short_name="rc"

# If on a derived branch (not master|develop|release) ...
if [[ -z ${branch_short_name} ]]; then
    initial_current_commit="`diff -u    <(git rev-list --first-parent ${current_branch}) \
                                        <(git rev-list --first-parent ${DEFAULT_BRANCH}) \
                                        | sed -ne 's/^-//p' \
                                        | tail -n 1`"

    branch_short_name="`echo ${initial_current_commit} \
                        | sed 's/[^a-zA-Z]//g' \
                        | sed -E 's/(.{3}).*$/\1/'`"
fi

# If not on master branch ...
if [[ -n ${branch_short_name} ]]; then
    # Build commit history for current branch (deriving from default) and count commits
    current_to_default=("${(f)$(git rev-list ${DEFAULT_BRANCH}.. || git rev-list origin/${DEFAULT_BRANCH}..)}")
    current_commits_count="`echo ${#current_to_default[@]}`"

    # Composing the build string
    build_number+="-${branch_short_name}${current_commits_count}"
fi

# Set OUTPUT here if debug is enabled to always override -o option
[[ -n ${DEBUG} ]] && {
    default_history=("${(f)$(git log --pretty=format:'%H' ${latest_default_commit})}")
    initial_default_commit="${default_history[-1]}"
    latest_default_commit="${default_history[1]}"

    echo "Current release (read from ${OUTPUT}): ${VERSION}\n"

    OUTPUT="/dev/stdout"

    cat <<-EODEBUG
Default branch: ${DEFAULT_BRANCH}
Current branch: ${current_branch}
Bump command: ${COMMAND}

On ${DEFAULT_BRANCH} ...
Initial commit timestamp: ${initial_default_commit_ts} (${initial_default_commit})
Latest commit timestamp: ${latest_default_commit_ts} (${latest_default_commit})

On ${current_branch} ...
Initial commit: ${initial_current_commit_short} (${initial_current_commit})
Latest commit: ${current_commit}
Commits deviation from ${DEFAULT_BRANCH}: ${current_commits_count}

Build number: ${build_number}
EODEBUG

    echo -n "New release: "
}

case ${COMMAND} in
    major)
        # nice snippet but does not append build number nor handle reset of counters
        #awk -F. '/[0-9]+\./{$1++;print}' OFS=. <<< ${vers} > ${output}
        echo "`awk -F. '/[0-9]+\./{$1++; print $1\".0.0\"}' OFS=. <<< ${VERSION}`.${build_number}" > ${OUTPUT}
        ;;
    minor)
        echo "`awk -F. '/[0-9]+\./{$2++; print $1\".\"$2\".0\"}' OFS=. <<< ${VERSION}`.${build_number}" > ${OUTPUT}
        ;;
    patch)
        echo "`awk -F. '/[0-9]+\./{$3++; print $1\".\"$2\".\"$3}' OFS=. <<< ${VERSION}`.${build_number}" > ${OUTPUT}
        ;;
    build)
        echo "`awk -F. '/[0-9]+\./{print $1\".\"$2\".\"$3}' OFS=. <<< ${VERSION}`.${build_number}" > ${OUTPUT}
        ;;
esac
